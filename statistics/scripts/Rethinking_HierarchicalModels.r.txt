
install.packages(c('devtools','coda','mvtnorm'))
install.packages("matrixStats")
library(devtools)
install_github("rmcelreath/rethinking")
library(rstan)
library(rethinking)

head(cars)
plot(cars)
abline(lm(dist~speed,data=cars)$coef[1],lm(dist~speed,data=cars)$coef[2],col="red")
lm(dist~speed,data=cars)$coef[1]
lm(dist~speed,data=cars)$coef[2]

#Example cars data(cars) 1.5
# define model
cars_formula <- alist(
  dist ~ dnorm(mu,sigma),mu <- a + b*speed,
  a ~ dnorm(0,100),
  b ~ dnorm(0,10),
  sigma ~ dunif(0,50)
)
# pass to map
cars_map <- map( cars_formula , data=cars )
# default show information
show(cars_map)

plot(cars)
abline(lm(dist~speed,data=cars)$coef[1],lm(dist~speed,data=cars)$coef[2],col="red")
abline(-17.356611,3.918799,col="blue")



#Sin previas

cars_formula2 <- alist(
  dist ~ dnorm(mu,sigma),
  mu <- a + b*speed
)
start_list <- list(
  a=mean(cars$dist),
  b=0,
  sigma=sd(cars$dist)
)
cars_mle <- map( cars_formula2 , data=cars , start=start_list )
summary(cars_mle)


data(UCBadmit) 
UCBadmit$male <- ifelse(UCBadmit$applicant.gender=="male",1,0)
ucb_formula <- alist(
  admit ~ dbinom(applications,p),
  logit(p) <- a + b*male,
  a ~ dnorm(0,10),
  b ~ dnorm(0,1)
)
ucb_map <- map( ucb_formula , data=UCBadmit )
show(ucb_map)
summary(ucb_map)



# convert dept factor to integer index variable 1.8
UCBadmit$dept_id <- coerce_index(UCBadmit$dept)
# formula
ucb_formula2 <- alist(
  admit ~ dbinom(applications,p),
  logit(p) <- a[dept_id] + b*male,
  a[dept_id] ~ dnorm(0,10),
  b ~ dnorm(0,1)
)
ucb_map2 <- map2stan( ucb_formula2 , data=UCBadmit, iter=2000 , warmup=1000 , chains=1 ,
                      refresh=500 )
precis(ucb_map2,depth=2)


ucb_formula3 <- alist(
  admit ~ dbinom(applications,p),
  logit(p) <- a + b*male,
   a ~ dnorm(0,sigma),
b ~ dnorm(0,1),
sigma ~ dcauchy(0,2.5)
)


ucb_formula3 <- alist(
  admit ~ binomial(applications,p),
  logit(p) <- a[dept_id] + b*male,
  a[dept_id] ~ normal(a_bar,sigma),
  b ~ normal(0,1),
  a_bar ~ normal(0,10),
  sigma ~ cauchy(0,2.5)
  )

ucb_map3 <- map2stan( ucb_formula3 , data=UCBadmit ,iter=2000 , warmup=1000 , chains=1 ,
                      refresh=500 )

precis(ucb_map3,depth=2)
plot(ucb_map3)


post <- extract.samples(ucb_map)
str(post)

ucb_formula2 <- alist(
admit ~ dbinom(applications,p),
logit(p) <- a[dept_id] + b*male,
a[dept_id] ~ dnorm(0,10),
b ~ dnorm(0,1)
)
ucb_map2 <- map( ucb_formula2 , data=UCBadmit )
post <- extract.samples(ucb_map2)
str(post)
hist(post$a[,1])
hist(post$a[,2])
hist(post$a[,6])


p<- link(ucb_map2,n=2000)
str(p)
new_data=data.frame(dept_id=6,male=c(0,1),applications=900)
p2<- link(ucb_map2,data=new_data)
p_mean <- apply(p2,2,mean)
p_HPDI <- apply(p2,2,HPDI,prob=0.9)
rbind(p_mean,p_HPDI)

sim_pulls <- sim(ucb_map2,data=new_data)
sim_mean <- apply(sim_pulls,2,mean) 
cbind(sim_mean/900,p_mean)

postcheck(ucb_map2)

ucb_formula3 <- alist(
  admit ~ dbinom(applications,p),
  logit(p) <- a[dept_id] + b*male,
  a[dept_id] ~ dnorm(0,10),
  b ~ dnorm(0,1)
)
ucb_stan <- map2stan( ucb_formula3 , data=UCBadmit ,
                      iter=2000 , warmup=1000 , chains=1 ,
                      refresh=500 )


#datos poisson

data(Kline)
Kline$log_pop <- log(Kline$population)
Kline$id <- 1:10
mpois <- map(
  alist(
    total_tools ~ dpois(lambda),
    log(lambda) <- a + a_society[id] + b*log_pop,
    a_society[id] ~ dnorm(0,10),
    a ~ dnorm(0,10),
    b ~ dnorm(0,1)
    
  ),
  data=Kline)
postcheck(mpois)


# Un modelo más sencillo

m <- map(  alist(
                 total_tools ~ dpois(lambda),
                 log(lambda) <- a + b*log_pop,
                 a ~ dnorm(0,10),
                 b ~ dnorm(0,1)
               ),
               data=Kline )
log_pop.seq <- seq(from=6,to=13,length.out=30)
new_data <- data.frame(log_pop=log_pop.seq)
lambda <- link(m,data=new_data,n=9000)
lambda.mean <- apply(lambda,2,mean)
lambda.HPDI <- apply(lambda,2,HPDI)
tt.sim <- sim(m,data=new_data,n=9000)
tt.HPDI <- apply(tt.sim,2,HPDI)
plot( total_tools ~ log_pop , data=Kline , pch=16 , col=rangi2 )
lines( log_pop.seq , lambda.mean )
shade( lambda.HPDI , log_pop.seq )
shade( tt.HPDI , log_pop.seq )


#Modelo jerárquico de fallas
N1=c(10,15)
id=c(1,2)
dat=data.frame(N1,id)
jerar1<-alist(N1 ~ dpois(lambda), log(lambda) <-a[id],  a[id] ~ dexp(y),y~dunif(0,1))
jerar_stan <- map2stan(jerar1 , data=dat,
                      iter=20000 , warmup=5000 , chains=1 ,
                      refresh=500, start=list(y=0.5) )
precis(jerar_stan,depth=2)
#Modelo por MCMC
w1=vector()
w2=vector()
N1=10
N2=15
m=100000
a=0
b=1
T=1
alpha=0.5
y=runif(1,a,b)
w1[1]=rexp(1,y)
w2[1]=rexp(1,y)
for (j in 2:m){
  while(y>=b)y=rgamma(1,3,(w1[j-1]+w2[j-1]))
  w1=c(w1,rgamma(1,(N1+1),(y+alpha*T)))
  w2=c(w2,rgamma(1,(N2+1),(y+alpha*T)))
  }
med1=N1+(1-alpha )*T*mean(w1[99000:100000])
med2=N2+(1-alpha )*T*mean(w2[99000:100000])
med1
med2
plot(w1[98000:100000],type="l")
lines(w2[98000:100000],col="blue")
